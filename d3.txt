官網:
google Hosted Libraries
https://developers.google.com/speed/libraries?hl=zh-TW

https://d3js.org/
https://github.com/d3/d3/wiki
https://github.com/d3/d3/wiki/TW-Home

JavaScript ES6 介紹
https://www.fooish.com/javascript/ES6/

最早1786年William Playfair出版的本「商業與政治圖集」(The Commercial and Political Atlas)當中第一次使用了直條圖和聚合線圖
https://ithelp.ithome.com.tw/articles/10201584

*.d3.js是开发期间使用的，里面bai的代du码展示是用户友好的，便以阅读及调试。
而daod3.min.js是前者经过代码压缩而成的，文件较小，用以在应用发布后部署，
可以节省网络传输流量，但相应的比较难以阅读。
本质没有区别，只是一个适合在开发时使用，一个在应用部署上线时使用。

1.下載最新版本：

https://github.com/mbostock/d3/releases
----------------------------------------------------

2.在 HTML 中直接載入最新版本
<html lang="tw">
<head>
	<title>SVG D3.js - 淺談 D3.js 的資料處理 - demo1 </title>
<script src="https://d3js.org/d3.v3.min.js"></script>
</head>
<body>
<script>
  var data = [1,2,3,4,5];

	d3.select('body').selectAll('div')
		.data(data)
		.enter()
		.append('div')
		.text('ok');
</script>
	
</body>
</html>
----------------------------------------------------

使用d3讀取CSV

https://wcc723.github.io/d3js/2014/10/11/Ironman-30-days-12/
https://ithelp.ithome.com.tw/articles/10159322
*.不會跑
dataPath = '/demoFile/d3data/'; //檔案路徑
dataFile = 'd3demoData141011.csv'; //檔名
dataUrl = dataPath + dataFile; //路徑加檔名
//定義SVG的大小
d3.csv(dataUrl, function(data){
    console.table(data); //用table的方式在console呈現json
    d3.select('.demo').text(JSON.stringify(data)) //把json寫到.demo上
});


https://wcc723.github.io/d3js/2014/10/12/Ironman-30-days-13/

----------------------------------------------------

將Chrome瀏覽器變成「Web Server」方便行動裝置實機測試
https://www.minwt.com/webdesign-dev/html/15092.html

Web Server for Chrome：
外掛名稱：Web Server for Chrome
支援平台：Google Chrome
下載網址：https://chrome.google.com/

進入外掛的安裝畫面後，點右上角的加到CHROME鈕，依序就可完成安裝

----------------------------------------------------

JDK & Tomcat

環境變數設定
JAVA_HOME=...
CLASSPATH = .
path中加入%JAVA_HOME%\bin

https://www.itread01.com/content/1549305367.html
首先從Apache的官方網站(http://tomcat.apache.org/)下載Tomcat。有安裝版和解壓版兩種，我個人喜歡用解壓版。

Tomcat安裝（綠色版安裝）
1、將下載的Tomcat解壓到指定目錄，如：D:\WorkSpaceByJava\DevtTools\Apache-Tomcat-8.0.23
2、Tomcat的目錄結構
bin：目錄存放一些啟動執行Tomcat的可執行程式和相關內容。
conf：存放關於Tomcat伺服器的全域性配置。
         lib：目錄存放Tomcat執行或者站點執行所需的jar包，所有在此Tomcat上的站點共享這些jar包。
         logs： 存放日誌檔案
         temp:  存放臨時檔案
wabapps：目錄是預設的站點根目錄，可以更改。
         work：目錄用於在伺服器執行時過度資源，簡單來說，就是儲存jsp、servlet翻譯、編譯後的結果。　　　　  
其他目錄和檔案暫時不做介紹。

Tomcat配置
　　 以下相關配置是在Windows系統下。

如：JAVA_HOME：C:\Program Files\Java\jdk1.8.0_45

第二、註冊Tomcat服務，使用控制檯控制服務的命令 （Win+R）

       配置Tomcat環境變數

          1、新建變數名：CATALINA_HOME，變數值：D:\WorkSpaceByJava\DevtTools\Apache-Tomcat-8.0.23

          2、開啟PATH，新增變數值：%CATALINA_HOME%\lib;%CATALINA_HOME%\bin
將命令列轉入到Tomcat安裝Bin目錄，例如：D:\WorkSpaceByJava\DevtTools\Apache-Tomcat-8.0.23\bin ，輸入命令：service.bat install 如下圖：

輸入命令：service.bat remove可以移除註冊服務

    Win+R + 命令提示符(管理員)

    啟動服務 net Start Tomcat8

    關閉服務 net stop  Tomcat8

    注：  (Tomcat8):是剛剛註冊的Tomcat服務名稱

    啟動Tomcat後: 測試Tomcat安裝是否成功時，輸入http://localhost:8080到瀏覽器裡
Tomcat的Webapps目錄是Tomcat預設的應用目錄，當伺服器啟動時，會載入所有這個目錄下的應用。

Tomcat部署

Tomcat部署Java Web應用程式有兩種方式：靜態部署和動態部署。（這裡記錄的是靜態部署的筆記）

     靜態部署：指的是伺服器啟動之前部署Web應用程式，只有當伺服器啟動之後，Web應用程式才能訪問。

     動態部署：指的是伺服器啟動之後部署web應用程式，而不用重新啟動伺服器。動態部署要用到伺服器提供的manager.war檔案。在目錄.../webapps/下沒有該檔案，

                      需重新下載tomcat，否則不能完成以下的功能。

    靜態部署分為以下3種方式都可以部署：（以PurpleStoneWeb專案為例說明，PurpleStoneWeb目錄假設是D:/WorkSpaceByJava/DevProject/PurpleStoneWeb）

     第一：利用Tomcat自動部署

               將PurpleStoneWeb目錄拷貝到Tomcat的/webapps下，然後啟動伺服器就可以了，Tomcat啟動時將自動載入應用。

               訪問地址如下：http://localhost:8080/PurpleStoneWeb/

               這種方式比較簡單，但是web應用程式必須在webapps目錄下。
	      
Tomcat的Webapps目錄是Tomcat預設的應用目錄，當伺服器啟動時，會載入所有這個目錄下的應用。

第二：修改Server.xml檔案部署指定專案

(1)、部署指定路徑專案

這種方式可以不必將PurpleStoneWeb目錄拷貝到webapps下，直接在D:/WorkSpaceByJava/DevProject/PurpleStoneWeb部署。

方法如下，更改Tomcat的conf/server.xml檔案，找到以下內容：

                                  <Context  path ="/PurpleStoneWeb"  

                                                    reloadable ="false"  

                                                    docBase ="D:/WorkSpaceByJava/DevelopmentProject/PurpleStoneWeb"  

                                                    workDir ="D:/WorkSpaceByJava/DevelopmentProject/PurpleStoneWeb/work" 

                                    />
				    
…

如果沒有Context 節點，請自行新增該節點。

                      path：是訪問時的根地址，表示訪問的路徑；如上述例子中，訪問該應用程式地址如下：http://localhost:8080/PurpleStoneWeb/

                      reloadable：表示可以在執行時在classes與lib資料夾下自動載入類包。其中reloadable="false"表示當應用程式中的內容發生更改之後伺服器不會自動載入，

                                          這個屬性在開發階段通常都設為true，方便開發，在釋出階段應該設定為false，提高應用程式的訪問速度。

                     docbase：表示應用程式的路徑，注意斜槓的方向“/”。 docBase可以使用絕對路徑，也可以使用相對路徑，相對路徑相對於webapps。

                     workdir：表示快取檔案的放置地址，是指Tomcat解析Jsp轉換為Java檔案，並編譯為class存放的資料夾，設定在專案資料夾裡面，可以避免移植到其他地方首次讀取jsp檔案需要重新解析 。

                                    (一般格式：專案資料夾/work)
----------------------------------------------------
Tomcat 中 jsp 中文亂碼顯示處理解決方案
https://www.itread01.com/content/1546593867.html

修改Tomcat的server.xml檔案，該檔案位於 tomcat/conf，紅色部分為新增部分，也就是當前使用的HTTP埠的連線方式的設定。

找到Connector 標籤，使 Tomcat 伺服器以UTF-8模式進行工作，從底層對亂碼進行處理，修改如下：

<Connector URIEncoding="utf-8" port="8080" protocol="HTTP/1.1"

connectionTimeout="20000"

redirectPort="8443" />

----------------------------------------------------
解決CSV亂碼問題
用記事簿打開CSV檔，所有格式，另存心檔-->編碼選UTF-8
----------------------------------------------------

三、選擇集與資料綁定
再回到D3來。

選擇集的方法主要有兩個：select和selectAll。對應javascript的方法：

select對應getElementById

selectAll對應getElementsByClassName。
比較要注意的是，選擇器只是選取了dom而已，要再透過資料綁定才是真正的「擁有」資料。

資料綁定 (Data-Join) 在D3裡是一個重要的術語，他是所有資料操作最核心的部份。資料綁定有兩個方法：data()和datum()。

這兩個方法中，datum()是將「一筆」資料綁定給選擇集當中的每一個元素當中，而data()是將「多筆」資料各別對應給選擇集當中的每一個元素。

這邊以datum()做個小範例：

首先在html中增加三組<p>
<p></p>
<p></p>
<p></p>

var p = d3.select("body").selectAll("p")
p.datum("資料")
  .text(function(d,i){
    return d + " " + i
  })
  
選擇集選到了三組<p>，然後使用datum()將字串”資料”綁定給選擇集的三個物件，
最後再用text()將文字放到<p>當中。如果我們用chrome的開發者工具(f12)檢視html可看到如下：
資料 0
資料 1
資料 2
----------------------------------------------------
一、資料綁定(Data-Join)的data()
前一篇提到D3的資料綁定(Data-Join)，今天要針對其中的**data()**方法來討論。

這裡我們將前一篇討論datum()方法時使用的例子，將datum()換置為data()。
但是因為data()方法綁定的資料是「多筆」的，所以還必須將資料格式修改為陣列資料，
所以將前例的 “資料” 修改為 ["資料"]。如下
html:
<p></p>
<p></p>
<p></p>

js
var p = d3.select("body").selectAll("p")
p.data(["資料"])
  .text(function(d,i){
    return d + " " + i
  })

畫面輸出的結果為
資料0

當選擇集有3個元素，而綁定資料為1筆時，則會有兩個元素沒有綁定資料。
接著做一點修改，將綁定資料改為4筆資料：

var p = d3.select("body").selectAll("p")
p.data(["蘋果","香蕉","芭樂","西瓜"])
  .text(function(d,i){
    return d + " " + i
  })
----------------------------------------------------
force directed graph  !!V3版
http://www.d3noob.org/2013/03/d3js-force-directed-graph-examples.html
